# -*- coding: utf-8 -*-
"""Nicholas Stamatakis CSE 101 Homework Assignment #2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qg15BjfK7Y54IfVp1M5H5WnNi6yOSaaj

# CSE 101: Computer Science Principles

#### Stony Brook University, Summer 2021, Session I Extended

## Homework Assignment #2

#### Due: Sunday, June 6, 2021 at 11:59 pm EDT

#### Learning Outcomes
By the end of these exercises you should be able to:
* Write functions that perform simple mathematical computations and return a value.

* Solve problems that use one or more if-statements containing:
    * only an if-clause
    * an if-clause and an else-clause
    * an if-clause and one or more elif-clauses

### Part 1: Evaluate $f(x,y) = \frac{\frac{x}{x + y^2}}{1 - \frac{1}{xyz}}$ (8 points)

Write a function `evaluate` that computes and returns the value of the following mathematical function, asuming that the values for $x$, $y$ and $z$ are given as arguments to the function. Also assume $x \ne 0, y \ne 0, z \ne 0, xyz \ne 1, x-y^2 \ne 0$.

$$f(x,y,z) = \frac{\frac{x}{x + y^2}}{1 - \frac{1}{xyz}}$$

Expected Results:

Function Call | Return Value
:-- | :--
`evaluate(3, 4, 2)` | `0.1648`
`evaluate(7, 1, 3)` | `0.9188`
`evaluate(9, 7, 5)` | `0.1557`
`evaluate(3, 3, 3)` | `0.2596`
"""

def evaluate(x, y, z):
    return ((x) / (x + y**2)) / ((1) - (1 / (x * y * z)))

# Test cases
print(f'{evaluate(3, 4, 2):0.4f}')
print(f'{evaluate(7, 1, 3):0.4f}')
print(f'{evaluate(9, 7, 5):0.4f}')
print(f'{evaluate(3, 3, 3):0.4f}')

"""### Part 2: Evaluate a Piecewise Function (8 points)

Write a function `piecewise` that computes and returns the value of the following mathematical function, asuming that the values for $x$ and $y$ are given as arguments to the function. You may assume that $x + 2^y \ge 0$

$ f(x,y) = \left\{
\begin{array}{ll}
      \sqrt{x + 2^y} & \textrm{if } x < 5 \\
      |y - x^3| & \textrm{if } x \ge 5 \\
\end{array} 
\right.$

Note: Python has a built-in function for computing an absolute value. Do a little research to find out what it's called!

Expected Results:

Function Call | Return Value
:-- | :--
`piecewise(2, 8)` | `16.0624`
`piecewise(5, 3)` | `122.0000`
`piecewise(-5, 3)` | `1.7321`
`piecewise(7, 6)` | `337.0000`

"""

import math

def piecewise(x, y):
    if x < 5:
        return math.sqrt(x + 2**y)
    else:
        return abs(y - x**3)

# Test cases
print(f'{piecewise(2, 8):0.4f}')
print(f'{piecewise(5, 3):0.4f}')
print(f'{piecewise(-5, 3):0.4f}')
print(f'{piecewise(7, 6):0.4f}')

"""### Part 3: Wolfpotle (8 points)

At local Mexican restaurant Wolfpotle ("wolf-POTE-lay"), customers can customize their burrito orders...to an extent. A customer selects a protein (`'chicken'`, `'steak'` or `'veggie'`) and optionally, a topping (`'guacamole'` or `'salsa'`) and/or a side order of chips (`'yes'` or `'no'`). The customer may choose one topping or no topping. Likewise, the customer may choose to buy chips or not. 

Item | Cost
:-- | :--
Chicken | \$8.35
Steak | \$9.70
Veggie | \$8.85
Guacamole | \$2.50
Salsa | \$1.75
Chips | \$1.95

Complete the function `wolfpotle`, which computes and returns the cost of a custom burrito. The function takes arguments in this order:

* `protein`: *must* be `'chicken'`, `'steak'` or `'veggie'`. You may assume that this argument is always valid.

* `topping`: *should* be `'guacamole'` or `'salsa'`. This argument might contain an invalid value.

* `chips`: *should* be `'yes'` or `'no'`. This argument might contain an invalid value.

If `topping` is neither `'guacamole'` nor `'salsa'`, the function simply ignores the value of `topping`. Likewise, if `chips` is neither `'yes'` nor `'no'`, the function simply ignores the value of `chips`.

Expected Results:

Function Call | Return Value
:-- | :--
`wolfpotle('steak', 'guacamole', 'yes')` | `14.15`
`wolfpotle('chicken', 'salsa', 'no')` | `10.10`
`wolfpotle('veggie', 'beans', 'huh?')` | `8.85`
`wolfpotle('steak', 'cheese', 'yes')` | `11.65`
`wolfpotle('chicken', 'salsa', 'yes')` | `12.05`
`wolfpotle('veggie', 'salsa', 'yes')` | `12.55`


"""

def wolfpotle(protein, topping, chips):
    cost=0
    if protein == 'chicken':
        cost += 8.35
        if topping == 'guacamole':
            cost += 2.50
        if topping == 'salsa':
            cost += 1.75
        if chips == 'yes':
            cost += 1.95
    elif protein == 'steak':
        cost += 9.70
        if topping == 'guacamole':
            cost += 2.50
        if topping == 'salsa':
            cost += 1.75
        if chips == 'yes':
            cost += 1.95
    elif protein == 'veggie':
        cost +=8.85
        if topping == 'guacamole':
            cost += 2.50
        if topping == 'salsa':
            cost += 1.75
        if chips == 'yes':
            cost += 1.95
    else:
        print("You must select a protein.")
    return cost


# Test cases
print(f"${wolfpotle('steak', 'guacamole', 'yes'):0.2f}")
print(f"${wolfpotle('chicken', 'salsa', 'no'):0.2f}")
print(f"${wolfpotle('veggie', 'beans', 'huh'):0.2f}")
print(f"${wolfpotle('steak', 'cheese', 'yes'):0.2f}")
print(f"${wolfpotle('chicken', 'salsa', 'yes'):0.2f}")
print(f"${wolfpotle('veggie', 'salsa', 'yes'):0.2f}")

"""### Part 4: Generating a Purchase Order (8 points)

Wolfie Manufacturing Co. needs you to complete the function `purchase_order`, which computes and returns the total cost for a customer to buy and ship gears, sprockets and axles from the company. The price schedule is shown below:

Item | Quantity | Price per Piece | Shipping Cost per Piece
:-- | :-- | :-- | :--
Gears | 1-50 | \$2.00 | \$0.40
      | 51+ | \$1.50 | \$0.25
Sprockets | 1-99 | \$1.25 | --
      | 100+ | \$0.95 | --
      | 1-500 | -- | \$0.05
      | 501-1000 | -- | \$0.04
      | 1001+ | -- | \$0.02
Axles | \* | \* | \*

\* Axles must be purchased in lots of 10. If a customer requests a number that is not a multiple of 10, we must round up to the next multiple of 10. Each lot of 10 axles costs \$275, and each lot costs \$45 to ship.

Expected Results:

Function Call | Return Value
:-- | :--
`purchase_order(20, 150, 40)` | `1478.0`
`purchase_order(75, 55, 0)` | `202.75`
`purchase_order(51, 600, 57)` | `2603.25`
`purchase_order(0, 75, 142)` | `4897.50`
`purchase_order(14, 2000, 6)` | `2293.60`
`purchase_order(98, 750, 78)` | `3474`
"""

def purchase_order(gears, sprockets, axles):
    total_cost=0
    if gears >=51:
        cost_gears = gears * 1.50 + gears * 0.25
    else:
        cost_gears = gears * 2.00 + gears * 0.40
    if sprockets >= 1001:
        cost_sprockets = sprockets * 0.95 + sprockets * 0.02
    if sprockets >= 501 and sprockets <= 1000:
        cost_sprockets = sprockets * 0.95 + sprockets * 0.04
    if sprockets >= 100 and sprockets <= 500:
        cost_sprockets = sprockets * 0.95 + sprockets * 0.05
    if sprockets >= 1 and sprockets <= 100:
        cost_sprockets = sprockets * 1.25 + sprockets * 0.05
    if axles % 10 == 0:
        cost_axles = (axles/10) * 275 + (axles/10) * 45
    else:
        cost_axles= ((axles//10)+1) * 275 + ((axles//10)+1) * 45
    total_cost = cost_gears + cost_sprockets + cost_axles
    return total_cost


# Test cases
print(f'${purchase_order(20, 150, 40):0.2f}')
print(f'${purchase_order(75, 55, 0):0.2f}')
print(f'${purchase_order(51, 600, 57):0.2f}')
print(f'${purchase_order(0, 75, 142):0.2f}')
print(f'${purchase_order(14, 2000, 6):0.2f}')
print(f'${purchase_order(98, 750, 78):0.2f}')

"""### Part 5: Computing Unemployment Benefits (8 points)

For this problem you will compute the unemployment benefits for a person who works in NYS during all four quarters of 2021. The simplified rules laid out below are based on a real [NYS Department of Labor publication](https://dol.ny.gov/system/files/documents/2021/02/p832_0.pdf)

Complete the function `benefits`, which takes four numbers (`q1`, `q2`, `q3`, `q4`) representing the income of an individual during all four quarters of the year. We will assume that all four values are positive. The eligibility for benefits are as follows:

1. The person must have been paid at least \$2,700 during one of the quarters. If not, the person get \$0 in benefits.

2. If the person's high quarter wages are more than \$3,575, then the benefit amount is the high quarter wages divided by 26. If this calculation is less
than \$143, the benefit rate is \$143.

3. If the person's high quarter wages are less than or equal to \$3,575, then the benefit amount is the high quarter wages divided by 25. If this calculation is less
than \$108, the benefit rate is \$108.

There are maximum and minimum benefit rates. The maximum benefit is \$504, and the minimum is \$108.

Hint: you'll want to use the `max` function to help you solve this problem. You can give `max` two or more values, and it will return which is the largest. For example, suppose you have three variables, `x`, `y` and `z`, and you want to know the maximum of the three. The function call `max(x, y, z)` will return the maximum value.

Expected Results:

Function Call | Return Value
:-- | :--
`benefits(500, 6000, 7200, 1180)` | `276.92`
`benefits(500, 600, 700, 1000)` | `0.00`
`benefits(600, 600, 2800, 1000)` | `112.00`
`benefits(700, 600, 3800, 1000)` | `146.15`
`benefits(800, 600, 3600, 1000)` | `143.00`
`benefits(900, 600, 36000, 1000)` | `504.00`
`benefits(500, 600, 2700, 1000)` | `108.00`


"""

def benefits(q1, q2, q3, q4):
    benefit_rate=0
    if q1 < 2700 and q2 < 2700 and q3 < 2700 and q4 < 2700:
        benefit_rate=0
        return benefit_rate
    else:
      if max(q1, q2, q3,q4) > 3575:
        benefit_rate = max(q1, q2, q3,q4) / 26
        if benefit_rate < 143:
          benefit_rate = 143
      if max(q1, q2, q3,q4) <= 3575:
        benefit_rate = max(q1, q2, q3,q4) / 25
      if benefit_rate < 108:
        benefit_rate = 108
      if benefit_rate > 504:
       benefit_rate = 504
      return benefit_rate

# Test cases
print(f'${benefits(500, 6000, 7200, 1180):0.2f}')
print(f'${benefits(500, 600, 700, 1000):0.2f}')
print(f'${benefits(600, 600, 2800, 1000):0.2f}')
print(f'${benefits(700, 600, 3800, 1000):0.2f}')
print(f'${benefits(800, 600, 3600, 1000):0.2f}')
print(f'${benefits(900, 600, 36000, 1000):0.2f}')
print(f'${benefits(500, 600, 2700, 1000):0.2f}')

"""### How to Submit Your Work

1. Go to the [course website](https://sites.google.com/stonybrook.edu/cse101sum/schedule-session-i).

1. Click the **Submit** link for this assignment.

1. Type your Net ID (Blackboard login) on the line provided.

1. Press the button marked **Add file**.

1. Click the **My Drive** tab.

1. Click on the file you wish to submit.

1. Hit **Select**.

1. Hit **Submit** to submit your file grading.
"""