# -*- coding: utf-8 -*-
"""Nicholas Stamatakis CSE 101 Homework Assignment #7

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ih3soplzWEt6b0KM1gf4IWLMIRYcEH7T

# CSE 101: Computer Science Principles

#### Stony Brook University, Summer 2021, Session I Extended

## Homework Assignment #7

#### Due: Sunday, July 11, 2021 at 11:59 pm EDT

#### Learning Outcomes
By the end of these exercises you should be able to:
* Perform basic queries on pandas DataFrame objects.
* Create simple data visualizations using pandas.

### NYC Airbnb Data-set

For the first part of this assignment you will be working with a data-set of NYC apartments available for short-term rental through Airbnb. First, visit the [kaggle.com](https://www.kaggle.com/dgomonov/new-york-city-airbnb-open-data) page for the data-set so you can see what you'll be working with.

E1. Download the file [`AB_nyc_house_2019.csv`](https://drive.google.com/file/d/1SFTXJkN5kpZMu1igm6eD7t7Z52-jgM6b/view?usp=sharing) and call `read_csv` to load the data.
"""

import pandas as pd 

df=pd.read_csv('AB_nyc_house_2019.csv') 
df

"""E2, E3. Call `describe` and then `info` to get an overview of the data-set."""

# call describe()
df.describe()

# call info()
df.info()

"""E4. Call `head` to inspect the first 5 rows of the data-set."""

df.head()

"""E5. Use the `hist` function with no arguments to generate a histogram of the `price` field of the entire data-set. You'll see a large bar in the leftmost bin, with very small other bars. The visualization will not be so useful."""

df['price'].hist()

"""E6. Use a condition to restrict the histogram to display only those prices less than \$500."""

df1=df['price']
cond1 = df['price'] < 500
df1[cond1].hist()

"""E7. Repeat the previous exercise, but use 100 bins instead of the default number of bins."""

df1=df['price']
cond1 = df['price'] < 500
df1[cond1].hist(bins=100)

"""E8. Select those apartments whose price is at least 20 times the median price. You  should get 83 such apartments. Display all columns for those apartments."""

import statistics
df1=df['price']
cond1 = df['price'] >= 20 * statistics.median(df1)
df[cond1]

"""E9. Select those apartments whose price is 20 times the median price, but this time display only the `neighbourhood_group`,`neighbourhood` and `price` columns for those rows."""

import statistics
df1=df['price']
cond1 = df['price'] >= 20 * statistics.median(df1)
cols = ['neighbourhood_group', 'neighbourhood', 'price']
df[cond1][cols]

"""E10. Select those apartments whose price is in the range \$200 to \$300, inclusive. There should be 6428 such apartments. Sort the results in descending order by `minimum_nights`. Display all columns."""

cond1 = df['price'] <= 300 
cond2 =  df['price'] >= 200
df1=df[cond1 & cond2].sort_values(by='minimum_nights', ascending=False)
df1

"""E11. Create a boxplot of apartment prices, but restrict the range of prices to the \$200-\$300 price range,  inclusive. Since you will be visualizing one dimension only (a "Series"), you need to use `.plot.box()` instead of `.boxplot()` to create the boxplot."""

df1=df['price']
cond1 = df['price'] <= 300 
cond2 =  df['price'] >= 200
df2=df1[cond1 & cond2]
df2.plot.box()

"""E12. Create another boxplot of apartment prices, but restrict the query to private rooms in the \$200-\$300 price range, inclusive. """

df1=df['price']
cond1 = df['price'] <= 300 
cond2 =  df['price'] >= 200
df2=df1[cond1 & cond2]
cond3 = df['room_type'] == 'Private room'
df3 = df2[cond3]
df3.plot.box()

"""E13. Group the apartments priced \$200-\$300 (inclusive) using the `neighbourhood_group` attribute and display the size of each group. You should get 5 groups because there are 5 boroughs in NYC."""

cond1 = df['price'] <= 300 
cond2 =  df['price'] >= 200
df1=df[cond1 & cond2]
df1['neighbourhood_group'].value_counts()

"""E14. Group the apartments priced \$200-$300 (inclusive) using the `room_type` attribute and display the size of each group."""

cond1 = df['price'] <= 300 
cond2 =  df['price'] >= 200
df1=df[cond1 & cond2]
df1['room_type'].value_counts()

"""E15. Display how many of each type of room priced \$200-\$300 (inclusive) are in each borough (`neighbourhood_group`). Note: you don't need to write 15 queries to find this info -- just one! **You don't have to check the `availability_365` column.**"""

cond1 = df['price'] <= 300 
cond2 = df['price'] >= 200
df1=df[cond1 & cond2]
df1.groupby(['neighbourhood_group','room_type']).size().unstack()

"""E16. Create a stacked bar chart that shows how many of each type of room priced \$200-\$300 (inclusive) are in each borough (`neighbourhood_group`). **You don't have to check the `availability_365` column.**"""

cond1 = df['price'] <= 300 
cond2 =  df['price'] >= 200
df1=df[cond1 & cond2]
df1.groupby(['neighbourhood_group','room_type']).size().unstack().plot.bar(ylabel='Count', stacked=True)

"""E17. Create a stacked bar chart that shows how many private rooms and shared rooms (only) priced \$200-\$300 (inclusive) are in each borough (`neighbourhood_group`). **You don't have to check the `availability_365` column.**"""

cond1 = df['price'] <= 300 
cond2 =  df['price'] >= 200
df1=df[cond1 & cond2]
cond3 = df1['room_type'] == 'Private room' 
cond4 =  df1['room_type'] == 'Shared room'
df2=df1[cond3 | cond4]
df2.groupby(['neighbourhood_group','room_type']).size().unstack().plot.bar(ylabel='Count', stacked=True)

"""E18. Generate a list of all the neighborhoods inside Manhattan where there are apartments for rent with a count of how many such apartments there are in each neighborhood. **Do not include the `availability_365` in your query. Do not restrict the output by price range.**

* There should be 2658 apartments for rent in Harlem and 1971 in the Upper West Side, for example.
"""

cond1 = df['neighbourhood_group'] == 'Manhattan'
df1=df[cond1]
df2=df1['neighbourhood'].value_counts()
df2

"""E19. Create a pie chart of the top 10 counts of neighborhoods inside Manhattan where there are apartments for rent. **You don't have to check the `availability_365` column.** If done correctly, the pie chart should contain the following neighborhoods (plus 5 others): Harlem, Upper West Side, Hell's Kitchen, East Village, and Upper East Side.

* Note: if you pass `label=''` to the `pie` function, pandas will omit the "Neighbourhood" label that will otherwise appear.
"""

cond1 = df['neighbourhood_group'] == 'Manhattan'
df1=df[cond1]
df2=df1['neighbourhood'].value_counts()
df2.head(10).plot.pie(label='')

"""E20. Repeat the previous exercise, but this time create a horizontal bar chart. Which of the two charts do you find easier to interpret? Are there certain questions that are easier to answer by viewing one of the charts instead of the other? (You don't have to type your answers; just think about them for a moment.)"""

cond1 = df['neighbourhood_group'] == 'Manhattan'
df1=df[cond1]
df2=df1['neighbourhood'].value_counts()
df2.head(10).plot.barh()

"""### How to Submit Your Work

1. Go to the [course website](https://sites.google.com/stonybrook.edu/cse101sum/schedule-session-i).

1. Click the **Submit** link for this assignment.

1. Type your Net ID (Blackboard login) on the line provided.

1. Press the button marked **Add file**.

1. Click the **My Drive** tab.

1. Click on the file you wish to submit.

1. Hit **Select**.

1. Hit **Submit** to submit your file grading.
"""