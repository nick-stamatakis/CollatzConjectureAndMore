# -*- coding: utf-8 -*-
"""Nicholas Stamatakis CSE 101 Homework Assignment #8

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17MPeETRdzuEI4yuZYchwYiuOflg7GtjK

# CSE 101: Computer Science Principles

#### Stony Brook University, Summer 2021, Session I Extended

## Homework Assignment #8

#### Due: **Friday**, July 16, 2021 at 11:59 pm EDT

#### Learning Outcomes
By the end of these exercises you should be able to:

* Perform basic queries on pandas DataFrame objects.

* Create simple data visualizations using pandas.

### Airline Delays

In this assignment we will explore a data-set of airline delays from the [US Bureau of Transportation Statistics](https://www.transtats.bts.gov/OT_Delay/ot_delaycause1.asp?qv52ynB=qn6n&20=E). Download [`airline_delay_causes_2020.csv`](https://drive.google.com/file/d/1rrl9O5fUYrTSaMRD3RV8j9rsgz1hMs4Q/view?usp=sharing), which contains data from 2020.

Airport information:

* `carrier`: Airline code.
* `carrier_name`: Airline name.
* `airport`: Airport code.
* `airport_name`: Airport name.

Airport statistics:

* `arr_flights`: Number of flights which arrived at the airport.
* `arr_del15`: Number of flights delayed (at least 15 minutes late).
* `carrier_ct`: Number of flights delayed due to air carrier (e.g. maintenance or crew problems, aircraft cleaning, baggage loading, fueling, etc.).
* `weather_ct`: Number of flights delayed due to weather.
* `nas_ct`: Number of flights delayed due to National Aviation System (e.g. non-extreme weather conditions, airport operations, heavy traffic volume, and air traffic control).
* `security_ct`: Number of flights delayed due to security (e.g. evacuation of a terminal or concourse, re-boarding of aircraft because of security breach, inoperative screening equipment and/or long lines in excess of 29 minutes at screening areas).
* `late_aircraft_ct`: Number of flights delayed due to a previous flight using the same aircraft being late.
* `arr_cancelled`: Number of cancelled flights.
* `arr_diverted`: Number of diverted flights.
* `arr_delay`: Total time (minutes) of delayed flights.
* `carrier_delay`: Total time (minutes) of delayed flights due to air carrier.
* `weather_delay`: Total time (minutes) of delayed flights due to weather.
* `nas_delay`: Total time (minutes) of delayed flights due to National Aviation System.
* `security_delay`: Total time (minutes) of delayed flights due to security.
* `late_aircraft_delay`: Total time (minutes) of delayed flights due to a previous flight using the same aircraft being late.

E1. Load the data-set in Colab and call `info` to summarize it.
"""

import pandas as pd
df = pd.read_csv('airline_delay_causes_2020.csv')
df.info()

df

"""* Note that there's an extra space in the columns `month`, `weather_ct`, `arr_delay` and `carrier_delay`.

* We can rename one or more columns using the [`rename`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.rename.html) function.

* Suppose our dataframe had a column `Code` we wanted to rename to `Code-Name`, and another called `Weight` we wanted to rename to `Weight in kgs`. We would execute the following code:

   `df.rename(columns = {'Code':'Code-Name', 'Weight':'Weight in kgs'}, inplace = True)`

E2. Using this example as a model, rename the four columns listed above to remove the leading spaces.
"""

df.rename(columns = {' month':'month', ' weather_ct':'weather_ct', ' arr_delay': 'arr_delay', ' carrier_delay': 'carrier_delay'}, inplace = True)

"""E3. Call `info` again to make sure that the columns were renamed correctly."""

df.info()

"""E4, E5. With that out of the way, let's continue by calling `head` and then `describe` to see what we're dealing with in this data-set."""

df.head()

df.describe()

"""E6. Create a time series line plot of canceled flights into JFK for the year 2020. Hint: select just the `month` and `arr_cancelled` fields from the data. Use `groupby` and `sum` to compute the total number of cancellations each month at JFK. Do you notice anything interesting in March and April? What explains that?"""

cond1=df['airport']=='JFK'
df1=df[cond1]
cols=['month','arr_cancelled']
df2=df1[cols]
grouped = df2.groupby('month').sum()
grouped.plot.line(xlabel='month', ylabel='arr_cancelled')
# March and April (which are months 3 and 4) were the beginning of the COVID-19 Pandemic which is 
# why there was a spike in cancellations during those months.

"""E7. Generate a list of airports in New York. Hint: explore the `airport_name` column a little to see what the values look like. Use `groupby` so that your list does not contain duplicates. Your output should have the names of 15 unique airports."""

cond1= df['airport_name'].str.contains('NY')
df1=df[cond1]
grouped1=df1.groupby('airport_name').size()
grouped1

"""E8. Generate a list of carriers that operate in New York airports. Your output should contain 17 unique carrier names and contain no duplicate entries."""

grouped2= df1.groupby('carrier_name').size()
grouped2

"""E9. Retrieve the rows corresponding to June 2020. There should be 1327 such rows."""

cond1=df['month']==6
df1=df[cond1]
df1

"""E10. Compute and display the number of arrivals at each airport during June 2020."""

cond1=df['month']==6
df1=df[cond1]
df2=df1.groupby('airport_name').sum()
df2['arr_flights']

"""E11. Display the names and number of arrivals of the 10 busiest airports in June 2020 ("busiest" in terms of total number of arrivals). The top airport should be Dallas/Fort Worth International with a total of 12,250 flights."""

df3=df2.sort_values(by='arr_flights', ascending=False).head(10)
df4=df3['arr_flights']
df4

"""E12. Create a horizontal bar chart showing the names and number of arrivals of the 10 busiest airports in June 2020. """

df4.plot.barh()

"""E13. [Challening!] Find a way to compute what percentage of flights the were canceled at each airport during 2020 by dividing the number of cancellations per airport by the sum: arrived flights + diverted flights + canceled flights. List the top 5 airports with  the highest cancellation percentages in descending order. If you do your calculations correctly, you should get the following percentages (approximately):

Airport | % Cancellations
:-- | :--
MMH | 20.0%
BLI | 18.0%
USA | 16.6%
HYA | 15.4%
SCK | 14.1%

"""

df1=df.groupby('airport').sum()
df2=df1[['arr_flights', 'arr_diverted','arr_cancelled']]
df2['% Cancellations'] = 100 * (df['arr_cancelled']) / (df['arr_flights']+df['arr_diverted']+df['arr_cancelled'])
#I tried but I kept getting similar errors in all of my attempts.

"""E14. [Challening!] Create a time series line plot of canceled flights into JFK, LGA and EWR for the year 2020. Put all three line plots in the same figure. Make sure that the legend clearly shows which line is for each airport. For instance, there should not be a line called "arr_cancelled"."""

df1=df[['airport','arr_cancelled']]
cond1=df1['airport']=='JFK'
cond2=df1['airport']=='LGA'
cond3=df1['airport']=='EWR'
df2=df1[cond1 | cond2 | cond3]
df2.plot.line()
#I was able to get the total arrivals cancelled, but I was unable to group them so that each airline showed up.

"""### Pokemon Stats

In this part of the assignment you will explore a data set of Pokemon stats from [kaggle](https://www.kaggle.com/abcsds/pokemon)!

E15. First, download the file [`Pokemon.csv`](https://drive.google.com/file/d/1CIbPwJSVZF2_omVcIytSanOoqPnjpQHZ/view?usp=sharing) and read it into a pandas dataframe.  
"""

df = pd.read_csv('Pokemon.csv')
df

"""E16, E17. Call `info` and `describe` on the data-set, and read the output."""

df.info()

df.describe()

"""E18. Drop the column labeled `#`, as it doesn't really add anything of value for the data."""

df.drop('#',axis=1, inplace=True)
df

"""E19. Create a scatterplot of `Attack` vs. `Defense`, where the color of a point is determined by the `Total` column. Use `viridis` for the colormap."""

df.plot.scatter(x='Attack', y='Defense',  c='Total', colormap='viridis')

"""E20. Create a scatterplot matrix of the `HP`, `Attack`, `Defense,` `Sp. Atk`, `Sp. Def` and `Speed` columns."""

scplt=pd.plotting.scatter_matrix(df[['HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed']])

"""E21. Generate a list of unique values for the `Type 1` column."""

df.groupby(['Type 1']).size()

"""E22. Generate a list of unique values for the `Type 2` column."""

df.groupby(['Type 2']).size()

"""E23. Display a bar chart that shows how many Pokemon there are for each type given in `Type 1`."""

df1=df.groupby(['Type 1']).size()
df1.plot.bar()

"""E24. Generate a correlation matrix for the data-set, but only for the `HP`, `Attack`, `Defense,` `Sp. Atk`, `Sp. Def` and `Speed` columns."""

df1=df[['HP', 'Attack', 'Defense', 'Sp. Atk', 'Sp. Def', 'Speed']]
df1.corr()

"""E25. Now create a heatmap of the correlations from the previous exercise using the `RdYlGn` colormap."""

import seaborn as sns
sns.heatmap(df1.corr(), cmap='RdYlGn');

"""### How to Submit Your Work

1. Go to the [course website](https://sites.google.com/stonybrook.edu/cse101sum/schedule-session-i).

1. Click the **Submit** link for this assignment.

1. Type your Net ID (Blackboard login) on the line provided.

1. Press the button marked **Add file**.

1. Click the **My Drive** tab.

1. Click on the file you wish to submit.

1. Hit **Select**.

1. Hit **Submit** to submit your file grading.
"""