# -*- coding: utf-8 -*-
"""Nicholas Stamatakis CSE 101 Homework Assignment #6

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13kmnb480ZcHWfI7Ati9VnO0tsOjDA9tH

# CSE 101: Computer Science Principles

#### Stony Brook University, Summer 2021, Session I Extended

## Homework Assignment #6

#### Due: Sunday, July 4, 2021 at 11:59 pm EDT

#### Learning Outcomes
By the end of these exercises you should be able to:
* Create, read and update the contents of a dictionary.

* Implement algorithms that use dictionaries to solve problems.

* Open and read the contents of a file into an appropriate data structure.

### Part 1: Secret Shopper (10 points)

Two parents are shopping with their child, trying their best to follow the grocery list and stay within the budget. The parents will always get everything on their list, but the child will also throw in random items as they walk around the store. 

Complete the function `grocery_shopping`, which takes four parameters: 
1. `shopping_list`: a dictionary that maps the name of each item (string) to the number of that item the parents will buy (integer)
2. `child_sneaking`: a dictionary that maps the name of each item (string) to the number of that item the child will sneak into the cart (integer)
3. `prices`: a dictionary that maps the name of each item (string) to the cost of the item (floating-point number)
4. `budget`: the amount of money the parents have to spend at the store

The function should return the amount over or under budget the total purchase is (over budget should result in a negative value, under budget a positive value). 

<br>

Example #1:

```
shopping_list1 = {'apples' : 5, 'bananas' : 10, 'oatmeal' : 1, 'granola bars' : 3, 'cheerios' : 2}
child_sneaking1 = {'flip flops' : 1, 'skittles' : 15, 'captain crunch' : 1}
prices1 = {'apples' : 0.25, 'bananas' : 1.25, 'oatmeal' : 10.49, 'granola bars' : 9.68, 'cheerios' : 2.40, 
          'flip flops' : 14.99, 'skittles' : 1.49, 'captain crunch' : 3.50, 'Twinkies' : 1.30}
budget = 100
```

Return value: `1.08`

<br>

Example #2:

```
shopping_list2 = {'apples' : 5, 'juice': 2, 'bananas' : 10, 'oatmeal' : 1, 'granola bars' : 3, 'cheerios' : 2}
child_sneaking2 = {'flip flops' : 1, 'skittles' : 15, 'captain crunch' : 1, 'chocolate': 4}
prices2 = {'apples' : 0.25, 'bananas' : 1.25, 'oatmeal' : 10.49, 'granola bars' : 9.68, 'cheerios' : 2.40,
          'flip flops' : 12.99, 'skittles' : 1.49, 'captain crunch' : 3.50, 'Twinkies' : 1.30, 'juice': 2.85,
          'chocolate': 4.5}
budget = 70
```

Return value: `-50.62`

<br>

Example #3:

```
shopping_list3 = {'apples' : 5, 'juice': 2, 'granola bars' : 3, 'cheerios' : 2, 'fish sticks': 20}
child_sneaking3 = {'flip flops' : 1, 'skittles' : 10, 'captain crunch' : 2, 'chocolate': 3, 'gum': 3}
prices3 = {'apples' : 0.25, 'bananas' : 1.25, 'oatmeal' : 10.49, 'granola bars' : 9.68, 'cheerios' : 2.40,
          'flip flops' : 12.99, 'skittles' : 2.49, 'gum': 3.25, 'captain crunch' : 3.50, 'Twinkies' : 1.30, 'juice': 2.85,
           'chocolate': 4.5, 'fish sticks': 2.45}
budget = 250
```

Return value: `92.07`
"""

def grocery_shopping(shopping_list, child_sneaking, prices, budget):
    balance = budget
    for i in shopping_list:
        for j in prices:
            if i == j:
                balance -= (shopping_list[i] * prices[j])
    for i in child_sneaking:
        for j in prices:
            if i == j:
                balance -= (child_sneaking[i] * prices[j])   
    return balance

# Test cases
shopping_list1 = {'apples' : 5, 'bananas' : 10, 'oatmeal' : 1, 'granola bars' : 3, 'cheerios' : 2}
child_sneaking1 = {'flip flops' : 1, 'skittles' : 15, 'captain crunch' : 1}
prices1 = {'apples' : 0.25, 'bananas' : 1.25, 'oatmeal' : 10.49, 'granola bars' : 9.68, 'cheerios' : 2.40,
          'flip flops' : 14.99, 'skittles' : 1.49, 'captain crunch' : 3.50, 'Twinkies' : 1.30}
print(f'{grocery_shopping(shopping_list1, child_sneaking1, prices1, 100):0.2f}')

shopping_list2 = {'apples' : 5, 'juice': 2, 'bananas' : 10, 'oatmeal' : 1, 'granola bars' : 3, 'cheerios' : 2}
child_sneaking2 = {'flip flops' : 1, 'skittles' : 15, 'captain crunch' : 1, 'chocolate': 4}
prices2 = {'apples' : 0.25, 'bananas' : 1.25, 'oatmeal' : 10.49, 'granola bars' : 9.68, 'cheerios' : 2.40,
          'flip flops' : 12.99, 'skittles' : 1.49, 'captain crunch' : 3.50, 'Twinkies' : 1.30, 'juice': 2.85,
           'chocolate': 4.5}
print(f'{grocery_shopping(shopping_list2, child_sneaking2, prices2, 70):0.2f}')

shopping_list3 = {'apples' : 5, 'juice': 2, 'granola bars' : 3, 'cheerios' : 2, 'fish sticks': 20}
child_sneaking3 = {'flip flops' : 1, 'skittles' : 10, 'captain crunch' : 2, 'chocolate': 3, 'gum': 3}
prices3 = {'apples' : 0.25, 'bananas' : 1.25, 'oatmeal' : 10.49, 'granola bars' : 9.68, 'cheerios' : 2.40,
          'flip flops' : 12.99, 'skittles' : 2.49, 'gum': 3.25, 'captain crunch' : 3.50, 'Twinkies' : 1.30, 'juice': 2.85,
           'chocolate': 4.5, 'fish sticks': 2.45}
print(f'{grocery_shopping(shopping_list3, child_sneaking3, prices3, 250):0.2f}')

"""### Part 2: Vacation Cost Calculator (10 points)

You are a travel agent and have been tasked with making reservations for a large group of people staying at a resort hotel for a week. Each kind of room (Normal, Double, King, Suite) has a fixed price to rent for the week, given in a dictionary. For example: 

`{'Normal': 70, 'Double': 105, 'King': 195, 'Suite': 249}`

Complete the function `vacation_calculator`, which takes two arguments: `room_prices`,  a dictionary that maps a type of room (a string) to the price of the room (an integer); and `reservations`, which is a list strings wherein the first part of the string contains the type of room being reserved, and the second part contains the desired count of rooms of that type. For example, the string `'King 3'` would indicate that 3 King rooms are desired.

The function iterates over the `reservations` list, extracting the room type and room count of each reservation. Room types can appear multiple times in the list. Then, the function looks up the price of the desired room using the `room_prices` dictionary and computes what it would cost to reserve the desired number of rooms. You may assume that the room type in the reservation always has a corresponding price in `room_prices`. At the end, the function returns the total spent on rooms for the vacation.

<br>

Example #1:

```
room_prices = {'Normal': 70, 'Double': 105, 'King': 195, 'Suite': 249}
reservations = ['Normal 1', 'Suite 2', 'Double 2', 'Normal 1', 'King 3']
```

Return value: `1433`

<br>

Example #2:

```
room_prices = {'Normal': 98, 'Double': 115, 'Suite': 349, 'King': 189}
reservations = ['Double 4', 'Suite 1', 'King 2', 'King 1', 'King 3']
```

Return value: `1943`

<br>

Example #3:

```
room_prices = {'Double': 135, 'King': 219, 'Normal': 75, 'Suite': 280}
reservations = ['King 2', 'Double 1', 'Normal 3', 'Suite 3', 'King 3', 'King 2', 'King 3']
```

Return value: `3390`
"""

def vacation_calculator(room_prices, reservations):
    reservations = ' '.join(reservations)
    reservations = reservations.split()
    num_rooms=reservations[1::2]
    for i in range(0,len(num_rooms)):
        num_rooms[i]=int(num_rooms[i])
    room_type=reservations[0::2]
    total=0
    for i in range(len(room_type)): 
        total += (num_rooms[i] * room_prices[room_type[i]])
    return total

# Test cases
print(vacation_calculator({'Normal': 70, 'Double': 105, 'King': 195, 'Suite': 249}, ['Normal 1', 'Suite 2', 'Double 2', 'Normal 1', 'King 3']))
print(vacation_calculator({'Normal': 98, 'Double': 115, 'Suite': 349, 'King': 189}, ['Double 4', 'Suite 1', 'King 2', 'King 1', 'King 3']))
print(vacation_calculator({'Double': 135, 'King': 219, 'Normal': 75, 'Suite': 280}, ['King 2', 'Double 1', 'Normal 3', 'Suite 3', 'King 3', 'King 2', 'King 3']))

"""### Part 3: Create a Dictionary of GPAs (10 points)

Complete the function `compute_gpas`, which takes two dictionaries as arguments:

1. `students`: a dictionary that maps a student's name to the students grades, formatted as described below; and

2. `letters`: a dictionary that always has the following contents:
```
letters = {
     'A': 4,
     'B': 3,
     'C': 2,
     'D': 1,
     'F': 0
}
```

The list of grades for a student interleaves letter grades with the number of credits for each course. For example, the list `['B', 3, 'A', 3, 'A', 4, 'D', 2]` indicates that a student took four courses and earned a B in a 3-credit course, an A in a 3-credit course, an A in a 4-credit course, and D in a 2-credit course.

The function computes the weighted GPA for each student and then creates and returns a new dictionary that maps each student to his/her GPA.

To compute a GPA, multiply each grade's grade points by the credit it is worth (e.g., A has 4 grade points, B has 3 grade points, etc.), add together all those products, and then divide the sum by the total number of credits.

For example, the GPA for the grades given in `['B', 3, 'A', 3, 'A', 4, 'D', 2]` would be $(3\times3 + 4\times3 + 4\times4 + 1\times2)/(3+3+4+2)=3.0$.

<br>

Example #1:

```
students = {
    'Sally': ['B', 3, 'A', 3, 'A', 4, 'D', 2],
    'John': ['C', 3, 'D', 1, 'A', 2, 'A', 3],
    'Mike': ['A', 3, 'C', 2],
    'Ron': ['B', 4]
}
```

Return value: `{'John': 3.0, 'Mike': 3.2, 'Ron': 3.0, 'Sally': 3.25}`

<br>

Example #2:

```
students2 = {
    'Bobby': ['B', 3, 'A', 3, 'A', 4, 'D', 2],
    'Chris': ['B', 4, 'C', 3, 'D', 3, 'A', 2, 'A', 3],
    'Alex': ['A', 3, 'C', 2],
    'Dolly': ['F', 2, 'A', 3, 'B', 4],
    'Erin': ['A', 3, 'B', 4, 'A', 2]
}
```

Return value: `{'Alex': 3.2, 'Bobby': 3.25, 'Chris': 2.73,
 'Dolly': 2.66,  'Erin': 3.55}`

<br>

Example #3:

```
students3 = {
    'Bobby': ['B', 3, 'A', 3, 'A', 4, 'D', 2],
    'Chris': ['B', 4, 'C', 3, 'D', 3, 'A', 2, 'A', 3],
    'Alex': ['A', 3, 'B', 3, 'C', 2],
    'Dolly': ['F', 2, 'A', 3, 'B', 4, 'A', 1, 'A', 4],
    'Erin': ['A', 3, 'B', 4, 'A', 2, 'C', 2],
    'Frankie': ['D', 1]
}
```

Return value: `{'Alex': 3.125, 'Bobby': 3.25, 'Chris': 2.73, 'Dolly': 3.14, 'Erin': 3.27, 'Frankie': 1.0}`



"""

def compute_gpas(students, letters):
    
    gpa=0
    new_students={}
    x=[]
    grades=[]
    keys = students.keys()
    for i in keys:
        grades = students.get(i)
        x.append(students.get(i))
        grades_l=grades[::2] 
        grades_w=grades[1::2]
        numer = 0
        denom = 0
        for j in range(len(grades_l)):
            numer += (letters[grades_l[j]] * grades_w[j])
            denom += grades_w[j]
            gpa = numer / denom
            gpa = round(gpa, 3)
        new_students[i] = gpa
    return new_students

# Test cases
import pprint
letters = {
    'A': 4,
    'B': 3,
    'C': 2,
    'D': 1,
    'F': 0
}

students1 = {
    'Sally': ['B', 3, 'A', 3, 'A', 4, 'D', 2],
    'John': ['C', 3, 'D', 1, 'A', 2, 'A', 3],
    'Mike': ['A', 3, 'C', 2],
    'Ron': ['B', 4]
}

students2 = {
    'Bobby': ['B', 3, 'A', 3, 'A', 4, 'D', 2],
    'Chris': ['B', 4, 'C', 3, 'D', 3, 'A', 2, 'A', 3],
    'Alex': ['A', 3, 'C', 2],
    'Dolly': ['F', 2, 'A', 3, 'B', 4],
    'Erin': ['A', 3, 'B', 4, 'A', 2]
}

students3 = {
    'Bobby': ['B', 3, 'A', 3, 'A', 4, 'D', 2],
    'Chris': ['B', 4, 'C', 3, 'D', 3, 'A', 2, 'A', 3],
    'Alex': ['A', 3, 'B', 3, 'C', 2],
    'Dolly': ['F', 2, 'A', 3, 'B', 4, 'A', 1, 'A', 4],
    'Erin': ['A', 3, 'B', 4, 'A', 2, 'C', 2],
    'Frankie': ['D', 1]
}

pprint.pprint(compute_gpas(students1, letters))
pprint.pprint(compute_gpas(students2, letters))
pprint.pprint(compute_gpas(students3, letters))

#I rounded my answers to three decimal places

"""### Part 4: Anagram Classification (10 points)

An anagram is a word formed by rearranging the letters of another word. For example, `listen` and `silent` are anagrams of each other. Also, `fried` and `fired` are anagrams of each other.

You run a mailroom at a middle school (assume that these exist), and you sort mail addressed to students. A few troublemakers think it's funny to scramble up the characters in their recipients' names. This turns the names into anagrams and makes your life more difficult.

Thankfully, you realize that no two students' real names are anagrams of each other. If you just group up mail addressed to names that are anagrams of each other, you'll end up with piles that each correspond to a student.

To automate this process, you decide to use Python. Complete the function `classify_mail`, which takes a list (`recipients`) of anagrams of names that are on each piece of mail, and return the number of different students all this mail is addressed to. For example, if you call `classify_mail(['Bob', 'Dan', 'Sednyy', 'Nad', 'Nda', 'Ricky', 'Bbo', 'Sydney']`, it should return `4`, because we can form the following groups:

1.   `'Bob', 'Bbo'`
2.   `'Dan', 'Nad', 'Nda'`
3.   `'Ricky'`
4.   `'Sydney', 'Sednyy'`

Some useful functions: `sorted(str)`, `str.lower()`, `str.join()`. (Yes -- you can sort the letters of a string using `sorted`!) You will find it helpful to use a dictionary to track distinct names you find in `recipients`.

Function Call | Return Value
:-- | :--
`classify_mail(['Bob', 'Dan', 'Sednyy', 'Nad', 'Nda', 'Ricky', 'Bbo', 'Sydney'])` | `4`
`classify_mail(['Dude', 'Duude', 'Duuude', 'Eudd', 'Uedd', 'Ddeu', 'Ddeuuu'])` | `3`
`classify_mail(['Bruh', 'Burh', 'Bhur', 'Rubh', 'Hurb'])` | `1`
"""

def classify_mail(recipients):
    recipients=sorted(recipients)
    recipients=','.join(recipients)
    recipients=recipients.lower()
    recipients=recipients.split(',')
    total = 0
    str_len=len(recipients)
    str1=[]
    for i in range(len(recipients)):
        recipients[i]=sorted(recipients[i])
    for i in range(len(recipients)):
        recipients[i]=''.join(recipients[i])
    recipients=sorted(recipients)
    if recipients.count(recipients[0]) == len(recipients):
        total = 1 
    else:
        for i in range(0, len(recipients)-1):
            if recipients[i+1]!=recipients[i]:
                total += 1
        total += 1
    return  total

# Test cases
print(classify_mail(['Bob', 'Dan', 'Sednyy', 'Nad', 'Nda', 'Ricky', 'Bbo', 'Sydney']))
print(classify_mail(['Dude', 'Duude', 'Duuude', 'Eudd', 'Uedd', 'Ddeu', 'Ddeuuu']))
print(classify_mail(['Bruh', 'Burh', 'Bhur', 'Rubh', 'Hurb']))

"""### EXTRA CREDIT: Assemble Student Data (10 points)

Complete the function `build_student_dict`, which opens and processes a CSV file containing data about students. The input file is formatted as in the following example:

```
ID,Name,Major,Minor,GPA                           <-- column headings
1,Jane Smith,Computer Science,Art History,3.5
6,John Doe,Business,Applied Mathematics,3.67
3,Allison Franks,Health Sciences,None,4.0
4,Xin Yang,Art History,History,3.87
16,Frankie Burger,Food Science,Nutrition,3.2
...etc...
```

The function then performs two tasks:

1. It creates a dictionary that maps a student's name (the key of the dictionary) to the student's GPA (the value). Be sure to store the GPA as a `float`, not a `string`.

2. It computes the average GPA of the students loaded from the file.

The function returns the average GPA and the dictionary it created, in that order. Remember that you can return two or more values in a single return statement. (For example: `return x, y`.)

<br>

To test your code with the examples below, you will need to download [students1.csv](https://drive.google.com/file/d/1tcfET4YPdyxkMXcq8yhpR7Sf5gDEgInO/view?usp=sharing), [students2.csv](https://drive.google.com/file/d/1WwUylqEOKpXNA4fFKupTh8_RyIExCNMS/view?usp=sharing) and [students3.csv](https://drive.google.com/file/d/1OknIO8PdAz9uC7hW3COM2E0kLNKcQg-D/view?usp=sharing) to your computer, and then upload them to Colab.

Example #1:

`avg_gpa1, db1 = build_student_dict('students1.csv')`

Return values:

```
3.76 
{'Jane Smith': 3.5, 'John Doe': 3.67, 'Allison Franks': 4.0, 'Xin Yang': 3.87}
```

<br>

Example #2:

`avg_gpa2, db2 = build_student_dict('students2.csv')`

Return values:

```
3.48 
{'Jane Smith': 3.5, 'John Doe': 3.67, 'Allison Franks': 4.0, 'Xin Yang': 3.87,
    'Frankie Burger': 3.2, 'Potsann Pans': 2.98, 'June Mayson': 3.14}
```

<br>

Example #3:

`avg_gpa3, db3 = build_student_dict('students3.csv')`

Return values:

```
3.4788888888888887
{'Jane Smith': 3.5, 'John Doe': 3.67, 'Allison Franks': 4.0, 'Xin Yang': 3.87, 'Frankie Burger': 3.2, 
 'Potsann Pans': 2.98, 'June Mayson': 3.14, 'Billme Layter': 3.72, 'Wirey Zappo': 3.23}
```
"""

import csv
import itertools

def build_student_dict(filename):
    with open(filename, encoding='utf-8-sig') as csvfile:
        reader = csv.reader(csvfile)
        name_gpa=[]
        for row in reader:
            del row[0]
            del row[1:-1]
            name_gpa.append(row)
        name_gpa_2=list(itertools.chain(*name_gpa))
        names=name_gpa_2[2::2]
        gpa_l=name_gpa_2[3::2]
        for i in range(0, len(gpa_l)):
            gpa_l[i] = float(gpa_l[i])
        gpa=sum(gpa_l)/len(gpa_l)
        names_gpa_3 = {}
        names_gpa_3 = {names[i]: gpa_l[i] for i in range(len(names))}
        return gpa, names_gpa_3
# Test cases
avg_gpa1, db1 = build_student_dict('students1.csv')
print(avg_gpa1, db1)
avg_gpa2, db2 = build_student_dict('students2.csv')
print(avg_gpa2, db2)
avg_gpa3, db3 = build_student_dict('students3.csv')
print(avg_gpa3, db3)

# I looked up the itertools module so I could use it for my program.

"""### How to Submit Your Work

1. Go to the [course website](https://sites.google.com/stonybrook.edu/cse101sum/schedule-session-i).

1. Click the **Submit** link for this assignment.

1. Type your Net ID (Blackboard login) on the line provided.

1. Press the button marked **Add file**.

1. Click the **My Drive** tab.

1. Click on the file you wish to submit.

1. Hit **Select**.

1. Hit **Submit** to submit your file grading.
"""