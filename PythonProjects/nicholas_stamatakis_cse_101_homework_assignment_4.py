# -*- coding: utf-8 -*-
"""Nicholas Stamatakis CSE 101 Homework Assignment #4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V4VovaGeRfr2zk1UXQ0pTUq34RGbqU6x

# CSE 101: Computer Science Principles

#### Stony Brook University, Summer 2021, Session I Extended

## Homework Assignment #4

#### Due: Sunday, June 20, 2021 at 11:59 pm EDT

#### Learning Outcomes
By the end of these exercises you should be able to:

* Design and implement algorithms that read, write and create lists of values using basic list operations.

* Design and implement algorithms that read, write and create lists of values using iteration.

### Part 1: Counting Off Sports Teams (4 points)

A gym coach needs a program to split a list of students into three groups by counting them off. The first person will be in group 1, the second person in group 2, the third person in group 3, the fourth person in group 1, the fifth person in group 2, the sixth person in group 3, etc until all of the students have been assigned a group. Complete the function `counting_off`, which accepts one parameter, a list of students called `students`. The list of students will always contain at least 3 strings.

Your function should use slicing to create and return the three teams in the form of three lists. Don't use loops to solve this problem; it's much harder that way!

<br>

Example #1:

Function call: `counting_off(['Sydney', 'Susan', 'Sally', 'Ricky', 'Daniel', 'Hayley'])`

Return value: `['Sydney', 'Ricky'], ['Susan', 'Daniel'], ['Sally', 'Hayley']`

<br>

Example #2:

Function call: `counting_off(['Sydney', 'Chris', 'Susan', 'Sam', 'Sally', 'Ricky', 'Daniel', 'Hayley'])`

Return value:  `['Sydney', 'Sam', 'Daniel'], ['Chris', 'Sally', 'Hayley'], ['Susan', 'Ricky']`

<br>

Example #3: `counting_off(['Sydney', 'Susan', 'Sally', 'Ricky', 'Daniel', 'Hayley', 'Alex', 'Brett', 'Aria', 'Tyler', 'Chad', 'Cole'])` 

Function call: `counting_off(['Sydney', 'Susan', 'Sally', 'Ricky', 'Daniel', 'Hayley', 'Alex', 'Brett', 'Aria', 'Tyler', 'Chad', 'Cole'])`

Return value: `['Sydney', 'Ricky', 'Alex', 'Tyler'], ['Susan', 'Daniel', 'Brett', 'Chad'], ['Sally', 'Hayley', 'Aria', 'Cole']`
"""

def counting_off(students):
    group_1=students[::3]
    group_2=students[1::3]
    group_3=students[2::3] 
    return group_1, group_2, group_3
    

# The lines below are to help you test your code
print(counting_off(['Sydney', 'Susan', 'Sally', 'Ricky', 'Daniel', 'Hayley']))
print(counting_off(['Sydney', 'Chris', 'Susan', 'Sam', 'Sally', 'Ricky', 'Daniel', 'Hayley']))
print(counting_off(['Sydney', 'Susan', 'Sally', 'Ricky', 'Daniel', 'Hayley', 'Alex', 'Brett', 'Aria', 'Tyler', 'Chad', 'Cole']))

"""### Part 2: Who Aced the Test? (4 points)

Complete the function `best_student`, which computes and returns the name and age of the student who had the highest score on a recent exam. Unfortunately, the data to process is not provided to the function in a particularly convenient format. The first argument is a list containing the students' names, such as `['Qi', 'Jack', 'Connor', 'Romin']`. The second argument is a list containing the students' ages and exam scores, interleaved. For instance, the list `[21, 92, 25, 95, 24, 90, 26, 98]` indicates that Qi is 21 years old and scored a 92, Jack is 25 years old and scored a 95, and so on.

Using  list methods and functions (e.g., `max` and `index`), as well as slicing, determine which student had the highest score and then return that student's name and age.

Hint: remember that with slicing we can provide a third value that tells Python to select every k-th value from a list. For instance, `costs[1::2]` would select elements 1, 3, 5, 7, ... from the list called `costs`.

Examples:

Function Call | Return Values
:-- | :--
`best_student(['Qi', 'Jack', 'Connor', 'Romin'], [21, 92, 25, 95, 24, 90, 26, 98])` | `('Romin', 26)`
`best_student(['Albert', 'Cris', 'Danny'], [22, 100, 24, 90, 23, 91])` | `('Albert', 22)`
`best_student(['Albert', 'Erin', 'Yang', 'Cris', 'Danny'], [25, 80, 24, 90, 27, 88, 23, 91, 24, 98])` | `('Danny', 24)`
`best_student(['Toni', 'Kim'], [25, 90, 27, 88])` | `('Toni', 25)`

"""

def best_student(names, records):
    ages=records[::2]
    grades=records[1::2]
    highest_grade=max(grades)
    index_of_highest_grade=grades.index(highest_grade)
    return names[index_of_highest_grade], ages[index_of_highest_grade]


# Test cases
print(best_student(['Qi', 'Jack', 'Connor', 'Romin'], [21, 92, 25, 95, 24, 90, 26, 98]))
print(best_student(['Albert', 'Cris', 'Danny'], [22, 100, 24, 90, 23, 91]))
print(best_student(['Albert', 'Erin', 'Yang', 'Cris', 'Danny'], [25, 80, 24, 90, 27, 88, 23, 91, 24, 98]))
print(best_student(['Toni', 'Kim'], [25, 90, 27, 88]))

"""### Part 3: Date Comparison (8 points)

Complete the function `compare_dates`, which takes in two strings, `date1` and `date2`, in the format of `MM/YYYY` or `M-YYYY`, and which returns the date that is later in chronological order. If the dates are identical, return either one. Note: loops are not needed to solve this problem.

Examples:

Function Call | Return Value
:-- | :-- 
`compare_dates('2/1989', '3/1989')` | `3/1989`
`compare_dates('5/1989', '3/1982')` | `5/1989`
`compare_dates('12/2009', '12/1982')` | `12/2009`
`compare_dates('11/1999', '3/1982')` | `11/1999`
`compare_dates('11/1977', '3/1999')` | `3/1999`
`compare_dates('12/2022', '12/2022')` | `12/2022`
"""

def compare_dates(date1, date2):
    year_1 = date1[-4::]
    year_2 = date2[-4::]
    month_1 = date1.split('/')
    month_2 = date2.split('/')
    month_1=month_1[0]
    month_2=month_2[0]
    if year_1 > year_2:
        return date1
    elif year_2 > year_1:
        return date2
    else:
        if month_1 > month_2:
            return date1
        elif month_2 > month_1:
            return date2
        else:
            return date1 or date2
# Test cases
print(compare_dates('2/1989', '3/1989'))
print(compare_dates('5/1989', '3/1982'))
print(compare_dates('12/2009', '12/1982'))
print(compare_dates('11/1999', '3/1982'))
print(compare_dates('11/1977', '3/1999'))
print(compare_dates('12/2022', '12/2022'))

"""### Part 4: Total Scrabble Score (8 points)

Write a function `scrabble_score()` that takes in one parameter, a list of words called `words`, and returns the score based on the words in the list. All of the words are composed of lowercase letters.

Scoring rules:

1. Each word is worth 5 points.

2. Each letter in a word adds 1 additional point to the score, except for the letters "j", "q", and "z", which are are worth 3 points each.

You don't need to use nested loops to solve this problem. Review how to count the number of times a letter appears in a string!

Examples:

Function Call | Return Value
:-- | :-- 
`scrabble_score(['a', 'i', 'no', 'the'])` | `27`
`scrabble_score(['quiz', 'quizzing'])` | `32`
`scrabble_score(['jaguar', 'joke', 'jazzy', 'quickly'])` | `54`
`scrabble_score(['time', 'desk', 'keyboard', 'quiet', 'stony'])` | `53`
`scrabble_score(['tote', 'jot', 'quip'])` | `30`
"""

def scrabble_score(words):
    score=0
    num_of_words=len(words)
    score += num_of_words * 5
    str1=''
    for element in words:
        str1 += element
    num_letters=len(str1)
    score += num_letters
    num_spec_let_j=str1.count('j')
    num_spec_let_q=str1.count('q')
    num_spec_let_z=str1.count('z')
    score += (num_spec_let_j + num_spec_let_q + num_spec_let_z) * 2
    return score


# Test cases
print(scrabble_score(['a', 'i', 'no', 'the']))
print(scrabble_score(['quiz', 'quizzing']))
print(scrabble_score(['jaguar', 'joke', 'jazzy', 'quickly']))
print(scrabble_score(['time', 'desk', 'keyboard', 'quiet', 'stony']))
print(scrabble_score(['tote', 'jot', 'quip']))

"""### Part 5: File Organizer (8 points)

Complete the function `organizer`, which takes two lists: a list of filename *extensions* called `file_types` and a list of filenames called `filenames`. The idea is that `file_types` provides a list of the types of files that are somehow important. The purpose of the function is to create and return a new list of filenames based on the `filenames` argument with all the important files listed first.

If you are not familiar with a filename extension, it is the final three or four letters (typically) that come after the period in a filename. For instance, in `homework.docx`, `docx` is the filename extension.

The function iterates over the `filenames` list, looking for those filenames whose extensions appear in `file_types`. These filenames appear first in the returned list, followed by all the other files listed in `filenames`. The order of the filenames from the original `filenames` list should be preserved as much as possible! If `file_types` is the empty list, this indicates that no file extensions are important, and so a copy of the original `filenames` list can simply be returned.

Let's look at a concrete example. 

Suppose `file_types = ['mp4', 'mov']`

and `filenames = ['concert.mp4', 'shows.txt', 'happy.txt', 'program.txt', 'friends.mov', 'program.py', 'show.mov']`.

The `file_types` argument indicates that filenames ending in `mp4` and `mov` should be placed at the beginning of the returned list, and all other filenames at the end of the returned list.

Hint: you don't need to use nested loops to solve this problem. Use the `in` operator to test whether a string is present inside a list. Another hint: consider using two lists to collect the filenames: a list of "important" files, and a separate list of all the other filenames.

<br>

Example #1:

Function call: `organizer(['txt'], ['Q.txt', 'Z.mov', 'B.txt', 'H.docx', 'T.py', 'C.txt'])`

Return value: `['Q.txt', 'B.txt', 'C.txt', 'Z.mov', 'H.docx', 'T.py']`

<br>

Example #2:

Function call: `organizer(['doc', 'xls', 'py'], ['A.txt', 'BB.py', 'CC.xls', 'DDDD.cpp', 'E.xls', 'FFFFF.cpp', 'GGG.doc'])`

Return value: `['BB.py', 'CC.xls', 'E.xls', 'GGG.doc', 'A.txt', 'DDDD.cpp', 'FFFFF.cpp']`

<br>

Example #3:

Function call: `organizer(['rb', 'js', 'hpp', 'qrt'], ['AAA.txt', 'BB.py', 'CCC.xls', 'D.cpp', 'EEE.xls', 'FFF.cpp', 'GG.doc'])`

Return value: `['AAA.txt', 'BB.py', 'CCC.xls', 'D.cpp', 'EEE.xls', 'FFF.cpp', 'GG.doc']`

<br>

Example #4:

Function call: `organizer(['ppt', 'slk'], ['abc.ppt', 'good.slk', 'toys.txt', 'games.ppt', 'puzzles.slk', 'work.ppt', 'xyz.pptx', 'play.txt'])`

Return value: `['abc.ppt', 'good.slk', 'games.ppt', 'puzzles.slk', 'work.ppt', 'toys.txt', 'xyz.pptx', 'play.txt']`

<br>

Example #5:

Function call: `organizer([], ['A.txt', 'B.jpeg', 'C.pdf'])`

Return value: `['A.txt', 'B.jpeg', 'C.pdf']`

<br>

Example #6:

Function call: `organizer(['mp4', 'js', 'mov'], ['concert.mp4', 'shows.txt', 'happy.txt', 'program.txt', 'friends.mov', 'program.py', 'show.mov'])`

Return value: `['concert.mp4', 'friends.mov', 'show.mov', 'shows.txt', 'happy.txt', 'program.txt', 'program.py']`
"""

def organizer(filetypes, filenames):
    important_files=[]
    other_files=[]
    
    for i in filetypes:
      length = len(i)
      for j in filenames:
        if j[-length:] == i:
          important_files.append(j)
          filenames.remove(j)
    
    important_files = important_files + filenames
    
    return important_files

#I used two for loops because it was the most intuitive way to problem that I could find to get all
#of the important files in the front of the list. I also made sure that each file type was grouped
#together in the printed lists if it was one of the important filetypes.
# Test cases
print(organizer(['txt'], ['Q.txt', 'Z.mov', 'B.txt', 'H.docx', 'T.py', 'C.txt']))
print(organizer(['doc', 'xls', 'py'], ['A.txt', 'BB.py', 'CC.xls', 'DDDD.cpp', 'E.xls', 'FFFFF.cpp', 'GGG.doc']))
print(organizer(['rb', 'js', 'hpp', 'qrt'], ['AAA.txt', 'BB.py', 'CCC.xls', 'D.cpp', 'EEE.xls', 'FFF.cpp', 'GG.doc']))
print(organizer(['ppt', 'slk'], ['abc.ppt', 'good.slk', 'toys.txt', 'games.ppt', 'puzzles.slk', 'work.ppt', 'xyz.pptx', 'play.txt']))
print(organizer([], ['A.txt', 'B.jpeg', 'C.pdf']))
print(organizer(['mp4', 'js', 'mov'], ['concert.mp4', 'shows.txt', 'happy.txt', 'program.txt', 'friends.mov', 'program.py', 'show.mov']))

"""### Part 6: Tracking Sales (8 points)

Complete the function `hardware_store`, which takes two arguments: a list of items for sale with the inventory on hand for each item, and a list of items that a person wants to purchase. The purpose of the function is to update the inventory after making the sales. The function also returns the number of items sold, which is not necessarily the number of items requested by the customer.

The first argument, `inventory`, interleaves the names of the items in inventory, along with the number on hand. For instance, the list `['rake', 4, 'shovel', 2, 'bucket', 5, 'hammer', 6]` indicates that 4 rakes are in inventory, 2 shovels are in inventory, 5 buckets are in inventory, and 6 hammers are in inventory.

The second argument, `sales`, is simply a list of items that a customer wants to purchase. It is possible that the customer includes an item not for sale at the store or wants to buy more of an item than is on hand. In the latter case, all of the available items of that type are sold to the customer.

<br>

Example #1:

`inventory = ['rake', 7, 'screwdriver', 5, 'bucket', 4, 'nail', 6]`

`sales = ['screwdriver', 'nail', 'rake', 'screwdriver']`

Updated `inventory = ['rake', 6, 'screwdriver', 3, 'bucket', 4, 'nail', 5]`

Return value: `4`

<br>

Example #2:

`inventory = ['rake', 4, 'shovel', 2, 'bucket', 5, 'hammer', 6]`

`sales = ['hammer', 'shovel', 'shovel', 'bucket', 'rake', 'shovel']`

Updated `inventory = ['rake', 3, 'shovel', 0, 'bucket', 4, 'hammer', 5]`

Return value: `5`


<br>

Example #3:

`inventory = ['barrel', 8, 'hammer', 4, 'rope', 0, 'paper', 2, 'wood', 5]`

`sales = ['rope', 'barrel', 'hammer', 'rope', 'rope', 'paper', 'paper', 'paper', 'wood']`

Updated `inventory = ['barrel', 7, 'hammer', 3, 'rope', 0, 'paper', 0, 'wood', 4]`

Return value: `5`

<br>

Example #4:

`inventory = ['rake', 4, 'shovel', 2, 'bucket', 5, 'hammer', 6]`

`sales = ['shovel', 'bucket', 'barrel', 'rope', 'rope', 'barrel', 'rake', 'rake']`

Updated `inventory = ['rake', 2, 'shovel', 1, 'bucket', 4, 'hammer', 6]`

Return value: `4`

<br>

Example #5:

`inventory = ['post', 3, 'rake', 4, 'shovel', 2, 'bucket', 5, 'hammer', 6]`

`sales = ['post', 'post', 'shovel', 'bucket', 'post', 'wood', 'post', 'barrel', 'rope', 'glue', 'rope', 'barrel', 'rake', 'rake']`

Updated `inventory = ['post', 0, 'rake', 2, 'shovel', 1, 'bucket', 4, 'hammer', 6]`

Return value: `7`
"""

def hardware_store(inventory, sales):
    names_of_items=inventory[::2]
    number_on_hand=inventory[1::2]
    number_sold =0
    for i in sales:
      #Check if in inventory
        if i in inventory:
          #Check if number of items is more than zero
          loc_num = inventory.index(i)+1
          if inventory[loc_num] >0: 
            inventory[loc_num] = inventory[loc_num]-1
            number_sold += 1
    return number_sold

    
# Test cases
print('Example #1:')
inv1 = ['rake', 7, 'screwdriver', 5, 'bucket', 4, 'nail', 6]
sold1 = ['screwdriver', 'nail', 'rake', 'screwdriver']
num_sales = hardware_store(inv1, sold1)
print('Updated inventory:', inv1)
print('Return vale:', num_sales)
print()

 

print('Example #2:')
inv2 = ['rake', 4, 'shovel', 2, 'bucket', 5, 'hammer', 6]
sold2 = ['hammer', 'shovel', 'shovel', 'bucket', 'rake', 'shovel']
num_sales = hardware_store(inv2, sold2)
print('Updated inventory:', inv2)
print('Return vale:', num_sales)
print()

 

print('Example #3:')
inv3 = ['barrel', 8, 'hammer', 4, 'rope', 0, 'paper', 2, 'wood', 5]
sold3 = ['rope', 'barrel', 'hammer', 'rope', 'rope', 'paper', 'paper', 'paper', 'wood']
num_sales = hardware_store(inv3, sold3)
print('Updated inventory:', inv3)
print('Return vale:', num_sales)
print()

 

print('Example #4:')
inv4 = ['rake', 4, 'shovel', 2, 'bucket', 5, 'hammer', 6]
sold4 = ['shovel', 'bucket', 'barrel', 'rope', 'rope', 'barrel', 'rake', 'rake']
num_sales = hardware_store(inv4, sold4)
print('Updated inventory:', inv4)
print('Return vale:', num_sales)
print()

print('Example #5:')
inv5 = ['post', 3, 'rake', 4, 'shovel', 2, 'bucket', 5, 'hammer', 6]
sold5 = ['post', 'post', 'shovel', 'bucket', 'post', 'wood', 'post', 'barrel', 'rope', 'glue', 'rope', 'barrel', 'rake', 'rake']
num_sales = hardware_store(inv5, sold5)
print('Updated inventory:', inv5)
print('Return vale:', num_sales)
print()

"""### How to Submit Your Work

1. Go to the [course website](https://sites.google.com/stonybrook.edu/cse101sum/schedule-session-i).

1. Click the **Submit** link for this assignment.

1. Type your Net ID (Blackboard login) on the line provided.

1. Press the button marked **Add file**.

1. Click the **My Drive** tab.

1. Click on the file you wish to submit.

1. Hit **Select**.

1. Hit **Submit** to submit your file grading.
"""