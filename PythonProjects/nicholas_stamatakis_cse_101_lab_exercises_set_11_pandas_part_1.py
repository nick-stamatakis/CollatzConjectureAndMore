# -*- coding: utf-8 -*-
"""Nicholas Stamatakis CSE 101 Lab Exercises Set #11: pandas Part 1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15Uc18TlhPR0dprjK3-F5n7V248IjNhTr

# CSE 101: Computer Science Principles

####Stony Brook University, Summer 2021, Session I Extended

### Lab Exercises Set #11

#### Due: Sunday, July 11, 2021 at 11:59 pm EDT

### Learning Outcomes
By the end of these exercises you should be able to:
* Write short code segments to load data-sets and perform simple queries on them.
* Perform basic grouping operations.
* Create simple bar charts, pie charts, and bot plots, among other kinds of charts.

This lab covers the material from Modules 16-19.

E1. For this lab you will be working with some heart disease data. First, go to [https://www.kaggle.com/ronitf/heart-disease-uci](https://www.kaggle.com/ronitf/heart-disease-uci) and read the Description section of the web page. It should take about two minutes.

E2. Download the file [`heart.csv`](https://drive.google.com/file/d/14M_AuILAvjetEv_yVbNrHJtGpDS28JCQ/view?usp=sharing) and upload it into Colab.

E3. Use the pandas function `read_csv()` to load the CSV file and store the resulting DataFrame in a variable named `df`.
"""

import pandas as pd 
df = pd.read_csv('heart.csv')

"""E4. Display the first 10 rows of the data-set using `head()`."""

df.head(10)

"""E5. Display the number of rows and columns in the data-set."""

df.shape

"""E6. Display the data types of the rows in the data-set."""

df.dtypes

"""E7. Call the `info` method on the DataFrame."""

df.info()

"""E8. Display summary statistics for the data-set."""

df.describe()

"""E9. Display the contents of the column storing the *maximum heart rate achieved* for each patient. You will have to read the [Description](https://www.kaggle.com/ronitf/heart-disease-uci) of the data-set to find out the name of the column used in the DataFrame."""

df['thalach']

"""E10. Display those patients whose maximum heart rate achieved was greater than 185. This should yield 9 rows from the data-set."""

cond1= df['thalach'] > 185
df[cond1]

"""E11. Display those patients whose maximum heart rate achieved was greater than 185 and whose serum cholesterol is less than 250. This should yield 6 rows from the data-set."""

cond1= df['thalach'] > 185
cond2 = df['chol'] < 250
df[cond1 & cond2]

"""E12. Display those **male** patients whose "thal" value was normal. (You have to read the data-set description to see what numerical value corresponds with "male" and "normal".) This should yield 102 rows from the data-set."""

cond1 = df['sex'] == 1
cond2 = df['thal'] == 3
df[cond1 & cond2]

"""E13. Display whose "trestbps" value was at least 180 or whose "oldpeak" value was greater than 4. This should yield 10 rows from the data-set."""

cond1 = df['trestbps'] >= 180
cond2 = df['oldpeak'] > 4
df[cond1 | cond2]

"""E14. Display the first 5 rows of the data-set, but only the the following columns, in this order: `'age'`, `'trestbps'`, `'oldpeak'`, `'slope'`."""

cols=['age', 'trestbps', 'oldpeak', 'slope']
df[cols].head()

"""E15. Now you are going to learn how to delete ("drop") a column from a DataFrame. First, look at the examples for the [drop](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.drop.html) function on the pandas home page. Paste the following code into the code cell below. The first line will delete the "exang" and "ca" columns from the DataFrame.
```
df.drop(['exang', 'ca'], inplace=True, axis=1)
df
```
"""

df.drop(['exang', 'ca'], inplace=True, axis=1)
df

"""If we omit the `inplace=True` part, then the original DataFrame is not modified.

E16. Next in this lab you will explore a data set of Pokemon stats from [kaggle](https://www.kaggle.com/abcsds/pokemon)!

First, download the file [Pokemon.csv](https://drive.google.com/file/d/1STSYKp8Zo8hJ0svOpKJXrwaKv41ZO7hw/view?usp=sharing) and read it into a pandas dataframe called `df`.
"""

df = pd.read_csv('Pokemon.csv')

"""E17. Call `info` and `describe` on the dataframe in separate cells below."""

df.info()

df.describe()

"""E18. Call the `head` and `tail` functions to view the first 10 and last 10 rows of the data-set.


"""

df.head(10)

df.tail(10)

"""E19. Display the rows for those Pokemon whose `Attack` value is greater than 150."""

cond1= df['Attack'] > 150
df[cond1]

"""E20. Display the rows for those Pokemon whose `Attack` value is greater than 150, `Defense` is greater than 110, and `Speed` is greater than 90."""

cond1 = df['Attack'] > 150
cond2 = df['Defense'] > 110
cond3 = df['Speed'] > 90
df[cond1 & cond2 & cond3]

"""E21. Display the rows for those Pokemon whose `Attack` value is greater than 170 or `Speed` is greater than 120."""

cond1 = df['Attack'] > 170
cond2 = df['Speed'] > 120
df[cond1 | cond2]

"""E22. With the help of `groupby`, display a list of the unique values in the `Type 1` column and how many of each value there are in the data-set."""

df.groupby(['Type 1']).size()

"""E23. Using `value_counts` instead of `groupby`, display a list of the unique values in the `Type 1` column and how many of each value there are in the data-set."""

df['Type 1'].value_counts()

"""E24. Create a horizontal bar chart of the values displayed in the previous two exercises."""

df['Type 1'].value_counts().plot.barh()

df.groupby(['Type 1']).size().plot.barh()

"""E25. Display the Pokemon whose `Type 1` is `Water` and sort them by their `Speed` attribute, in decreasing order."""

df[df['Type 1'] == 'Water'].sort_values(by='Speed', ascending=False)

"""E26. Display a histogram of the `Speed` attribute using 25 bins."""

df['Speed'].hist(bins=25)

"""E27. Display a histogram of the `Speed` attribute for Pokemon where their `Type 1` is `Water`. Use 20 bins."""

df1=df[df['Type 1'] == 'Water']
df1['Speed'].hist(bins=20)

"""E28. Select all the Pokemon whose `Type 1` is `Water` and then display counts for the `Type 2` attribute for those Pokemon. For instance, there are 10 Water Pokemon whose `Type 2` is `Ground`, and 7 whose `Type 2` is `Flying`."""

df2=df[df['Type 1'] == 'Water']
df2.groupby('Type 2').size()

"""E29. Display a pie chart of the counts generated in the previous exercise."""

df2=df[df['Type 1'] == 'Water']
df2.groupby('Type 2').size().plot.pie(label='')

"""E30. Use `groupby` to group the Pokemon first by `Type 1`, and then by `Type 2. Display counts of how many Pokemon are in each group."""

df1=df.groupby('Type 1')
print(df1.size())
df2=df.groupby('Type 2')
print(df2.size())

df.groupby(['Type 1', 'Type 2']).size().unstack()
#2D data shows how Type 1 attributes and Type 2 relate.

"""E31. Display a horizontal stacked bar chart of the data generated in the previous exercise. Be sure to call `unstack` where appropriate. Set the `figsize=(10,6)` and leave the legend in its default position."""

df.groupby(['Type 1', 'Type 2']).size().unstack().plot.barh(ylabel='Count', stacked=True, figsize=(10,6))

"""E32. Create boxplots for the `Attack`, `Defense`, `Speed`, `Sp. Atk` and `Sp. Def` attributes. Note that there are outliers at the upper end of the range, but not the lower end. Nobody wants "unusually weak" Pokemon!"""

df.boxplot(column=['Attack', 'Defense', 'Speed', 'Sp. Atk', 'Sp. Def'])

"""E33. Note the outliers near the top half of the figure. Perform a query on the dataframe to list the Pokemon whose `Defense` value is greater than 200."""

cond1 = df['Defense'] > 200
df[cond1]

"""### How to Submit Your Work

1. Go to the [course website](https://sites.google.com/stonybrook.edu/cse101sum/schedule-session-i).

1. Click the **Submit** link for this assignment.

1. Type your Net ID (Blackboard login) on the line provided.

1. Press the button marked **Add file**.

1. Click the **My Drive** tab.

1. Click on the file you wish to submit.

1. Hit **Select**.

1. Hit **Submit** to submit your file grading.
"""