# -*- coding: utf-8 -*-
"""Nicholas Stamatakis CSE 101 Homework Assignment #5

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KNHjpNClO63r0bAhN1dv8-MrJ_1QHSax

# CSE 101: Computer Science Principles

#### Stony Brook University, Summer 2021, Session I Extended

## Homework Assignment #5

#### Due: Sunday, June 27, 2021 at 11:59 pm EDT

#### Learning Outcomes
By the end of these exercises you should be able to:
* Implement algorithms that use logical operators.

* Implement simple algorithms using with while-loops.

### Reminder about the `or` and `and` Operators

When writing Boolean expressions using `or` or `and`, you need to be explicit when writing relational operators in concert with these logical operators.

For example, suppose you wanted to see if `name` equals `'Bob'` or `name` equals `'Mary'`. The proper way to do this is as follows:

```
if name == 'Bob' or name == 'Mary':
```
NOT
```
if name == 'Bob' or 'Mary':
```

### Part 1: Dog Intraocular Eye Pressure (8 points)

A dog's intraocular eye pressure(IOP) varies with age and is usually measured by taking an average of several measurements. Having a low or normal eye pressure is fine and generally does not bother a dog, but if it is high it can cause pain and vision loss.

Complete the function `intraocular_measure`, which takes in two lists, `left_iop` and `right_iop`, and returns the measure `'low'`, `'normal'`, `'high'` or `'danger'`. `left_iop` represents several eye pressure readings taken from the left eye, and `right_iop` from the right eye.

The function first takes the average of each list to get the average IOP of each eye. The following rules apply **in this order**:

* If the average left **OR** right average IOP is greater than 40, return '`danger'`.
* If the average left **OR** right average IOP is in the range 26 - 40, return '`high'`.
* If the average left **AND** right average IOP are in the range 0 - 9, return '`low'`.
* If the average left **AND** right average IOP are in the range 10 - 25, return '`normal1'`.
* If the average left **OR** right average IOP is in the range 0 - 25, return '`normal2'`.

Expected Results: 

Function Call | Return Value
--- | ---
`intraocular_measure([23, 15, 10], [21, 20, 13, 14])` | `'normal1'`
`intraocular_measure([3, 9, 1, 5], [2, 5, 4])` | `'low"`
`intraocular_measure([55, 63, 67], [14, 17, 10])` | `'danger'`
`intraocular_measure([6, 7, 10], [21, 22, 20, 13])` | `'normal2'`
`intraocular_measure([33, 45], [26, 27, 30])` | `'high'`
"""

def intraocular_measure(left_iop, right_iop):
    left_av = sum(left_iop)/len(left_iop)
    right_av = sum(right_iop)/len(right_iop)
    if left_av > 40 or right_av > 40:
        return 'danger'
    elif (26 <= left_av <= 40) or (26 <= right_av <= 40):
        return 'high'
    elif (0 <= left_av <= 9) and (0 <= right_av <= 9):
        return 'low'
    elif (10 <= left_av <= 25) and (10 <= right_av <= 25):
        return 'normal1'
    elif (0 <= left_av <= 25) and (0 <= right_av <= 25):
        return 'normal2'

# Test cases
print(intraocular_measure([23, 15, 10], [21, 20, 13, 14]))
print(intraocular_measure([3, 9, 1, 5], [2, 5, 4]))
print(intraocular_measure([55, 63, 67], [14, 17, 10]))
print(intraocular_measure([6, 7, 10], [21, 22, 20, 13]))
print(intraocular_measure([33, 45], [26, 27, 30]))

"""### Part 2: Field Day Optimized Game (8 points)

For field day, certain games are better for players than others based on their coordination, arm strength, and leg strength, which are based on a general scale of low, normal, high.

Complete the function `game_choice` that takes a player's attributes and returns the recommended game. The player's attributes are given in this order:
* coordination
* arm strength
* leg strength

The following rules apply and must be checked in this order:
*  If coordination is `'high'` and leg strength is `'normal'` or `'high'`, then recommend `'three-legged race'`.
*  If coordination is `'normal'` or `'high'`, and arm and leg strength are NOT `'high'`, then recommend `'egg & spoon relay'`.
*  If arm and leg strength are `'normal'` or `'high'`, then recommend `'baseball'`.
*  If arm strength is `'normal'` or `'high'`, then recommend `'tug-of-war'`.
*  If leg strength is `'normal'` or `'high'`, then recommend `'440-yard dash'`.
*  If all attributes are `'low'`, then recommend `'spectating'`.

Expected Results: 

Function Cell | Return Value
--- | ---
`game_choice('low', 'low', 'low')` | `'spectating'`
`game_choice('high', 'normal', 'normal')` | `'three-legged race'`
`game_choice('normal', 'low', 'high')` | `'440-yard dash'`
`game_choice('high', 'normal', 'low')` | `'egg & spoon relay'`
`game_choice('low', 'normal', 'low')` | `'tug-of-war'`
`game_choice('normal', 'high', 'high')` | `'baseball'`
"""

def game_choice(coord, arm, leg):
    if (coord == 'high') and (leg =='normal' or leg == 'high'):
        return 'three-legges race'
    elif (coord == 'normal' or coord == 'high') and (arm != 'high' and leg != 'high'):
        return 'egg & spoon relay'
    elif (arm == 'normal' or arm == 'high') and (leg == 'normal' or leg == 'high'):
        return 'baseball'
    elif arm == 'normal' or arm == 'high':
        return 'tug-of-war'
    elif leg == 'normal' or leg == 'high':
        return '440-yard dash'
    elif coord == 'low' and arm == 'low' and leg == 'low':
        return 'spectating'

# Test cases
print(game_choice('low', 'low', 'low'))
print(game_choice('high', 'normal', 'normal'))
print(game_choice('normal', 'low', 'high'))
print(game_choice('high', 'normal', 'low'))
print(game_choice('low', 'normal', 'low'))
print(game_choice('normal', 'high', 'high'))

"""### Part 3: We're Going on Vacation! (8 points)

The Stony Brook Resort and Fertilizer Depot offers a vacation package as follows:

* The regular price for each adult is \$125 per day. However, any days beyond the fifth day that an adult stays are 25% off the regular price. (This is the first of a few discounts available to customers.)

* The price for each child is \$75 per day regardless of how many days a group stays.

* A \$150 discount is given if the groupâ€™s stay begins on a Monday and lasts no more than 4 days (including Monday itself).

* A service charge of 5% of the original, non-discounted cost is applied for groups of 6 or more.

Complete the function `resort`, which takes four arguments, in this order: (i) the number of adults, (ii) the number of children, (iii) the length of the vacation in days, and (iv) the day of the week that the vacation begins (which might be given in mixed uppercase/lowercase). The function returns the final cost for the vacation, including any applicable service charges and/or discounts.

The starting day will be one of the following strings, with any combination of uppercase and lowercase letters:
* `'Monday'`
* `'Tuesday'`
* `'Wednesday'`
* `'Thursday'`
* `'Friday'`
* `'Saturday'`
* `'Sunday'`

Examples:

Function Call | Return Value
:-- | :-- 
`resort(4, 3, 7, 'Monday')` | `5078.75`
`resort(4, 3, 7, 'MONDAY')` | `5078.75`
`resort(6, 4, 3, 'MONDAY')` | `3157.5`
`resort(6, 4, 3, 'WEDnesday')` | `3307.5`
`resort(2, 2, 3, 'Thursday')` | `1200` or `1200.0`
`resort(2, 2, 7, 'friday')` | `2675.0`
`resort(1, 4, 9, 'TUESday')` | `3700.0`
`resort(2, 5, 6, 'SUNDAY')` | `3875.0`
`resort(3, 6, 2, 'Friday')` | `1732.5`
`resort(3, 7, 10, 'Monday')` | `8981.25`

"""

def resort(adults, children, num_days, start_day):
    start_day=start_day.lower()
    if num_days > 4:
        cost_adult = adults * 125 * num_days
        discount_cost_adult = (adults * 125 * 5) + (adults * 125 * (num_days-5) * 0.75)
        cost_child= children * 75 * num_days
        total_cost = discount_cost_adult + cost_child
        if adults + children >= 6:
            total_cost_prediscount = cost_adult + cost_child
            service_charge = total_cost_prediscount * 0.05
            total_cost += service_charge
        return total_cost
    else:
        cost_adult = adults * 125 * num_days
        cost_child= children * 75 * num_days
        total_cost = cost_adult + cost_child
        if adults + children >= 6:
            service_charge = total_cost * 0.05
            total_cost += service_charge       
        if start_day == 'monday':
            total_cost -= 150
        return total_cost
# Test cases
print(resort(4, 3, 7, 'Monday'))
print(resort(4, 3, 7, 'MONDAY'))
print(resort(6, 4, 3, 'MONDAY'))
print(resort(6, 4, 3, 'WEDnesday'))
print(resort(2, 2, 3, 'Thursday'))
print(resort(2, 2, 7, 'friday'))
print(resort(1, 4, 9, 'TUESday'))
print(resort(2, 5, 6, 'SUNDAY'))
print(resort(3, 6, 2, 'Friday'))
print(resort(3, 7, 10, 'Monday'))

"""### Part 4: Return of Evil E (8 points)

Evil E has returned with enhanced powers!

1. As with the previous incarnation of Evil E, Enhanced Evil E will destroy one letter on either side of an `E`. However, Enhanced Evil E will also self-destruct. Also, the two letters and the `E` will leave a void behind, collapsing the string. For example, the string `VILEVIL` will become `VIIL`. Note that spaces are no longer inserted where characters are destroyed.

2. Enhanced Evil E wil destroy all `E` characters in a string, as well as their neighbors. For example, `EEMOONEE` becomes `OO`.

Complete the function `evil_e_returns`, which takes in a string `message` that contains zero or more `E` characters. Return the string after the Enhanced Evil E takes effect on the string. If the input string contains no `E`, the function returns the input string unchanged.

Hint: Using the string function `split` is extremely helpful in solving this problem. (But don't split on whitespace!)

Examples:

Function Call | Return Value
:-- | :--
`evil_e_returns('EVILE'))` | `'I'`
`evil_e_returns('EVIL'))` | `'IL'`
`evil_e_returns('LOVELY'))` | `'LOY'`
`evil_e_returns('INDEEDLY DOODLY')` | `'INLY DOODLY'`
`evil_e_returns('EEEEEE'))` | `''`
`evil_e_returns('CAR RACER'))` | `'CAR RA'`
`evil_e_returns('ENTRANCE THIS WAY'))` | `'TRANTHIS WAY'`
`evil_e_returns('ACCESS PLEASE'))` | `'ACS P'`
`evil_e_returns('WOLFIE THE SEAWOLF'))` | `'WOLFTWOLF'`
`evil_e_returns('STONY BROOK'))` | `'STONY BROOK'`
`evil_e_returns('YXEGEOOOEJEVU DGENIQEVDDEF IGEEWT'))` | `'YOU DID IT'`
"""

def evil_e_returns(message):
    if 'E' in message:
        message=message.split('E')
        for i in message:
            first_part=message[0]
            first_part=first_part[:-1]
            last_part=message[-1]
            last_part=last_part[1:]
            middle=''
            if len(message) == 2:
                new_message=first_part + last_part
                return new_message
            if len(message) > 2:
                for i in range(1,len(message)-1):
                    mid=message[i]
                    mid=mid[1:-1]
                    middle += mid
                new_message = first_part + middle + last_part
                return new_message
    else:
        return message

# Test cases
print(evil_e_returns('EVILE'))
print(evil_e_returns('EVIL'))
print(evil_e_returns('LOVELY'))
print(evil_e_returns('INDEEDLY DOODLY'))
print(evil_e_returns('EEEEEE'))
print(evil_e_returns('CAR RACER'))
print(evil_e_returns('ENTRANCE THIS WAY'))
print(evil_e_returns('ACCESS PLEASE'))
print(evil_e_returns('WOLFIE THE SEAWOLF'))
print(evil_e_returns('STONY BROOK'))
print(evil_e_returns('YXEGEOOOEJEVU DGENIQEVDDEF IGEEWT'))

"""### Part 5: Raiding the Flea Market (8 points)

You are an antique dealer with just 10 minutes to rush through a flea market before it closes and look for items to purchase. With a wad of cash in hand (`budget`), you start making a list of items to consider buying (`items`) and their prices (`prices`). Complete the function `antique_purchase`, which purchases items in order from the `items` list until your money runs out.

Specifically, purchase an item if you can afford it, adding the item to a list to be returned from the function. If you cannot afford an item from the list, skip it and move to the next item.

Suppose we have the following:
```
items = ['chair', 'table', 'lamp', 'necklace', 'couch']
prices = [50, 115, 250, 100, 1000]
budget = 300
```
We begin by buying the chair for \$50 because we can afford it. This leaves us with \$250 left to spend. The table costs \$115, which we can also afford, leaving us with \$135. The lamp costs more than we have left, so we skip it. But then we buy the necklace for \$100, leaving us with \$35. The couch costs \$1000, which we can't afford. This is the last item in `items`. The function returns the list `['chair', 'table', 'necklace']`.

Example #1:

Function call: `antique_purchase(['chair', 'table', 'lamp', 'necklace', 'couch'], [50, 115, 250, 100, 1000], 300)`

Return value: `['chair', 'table', 'necklace']`

<br>

Example #2:

Function call: `antique_purchase(['chair', 'table', 'lamp', 'necklace', 'couch', 'statue'], [50, 115, 250, 100, 800, 400], 1000)`

Return value: `['chair', 'table', 'lamp', 'necklace', 'statue']`


<br>

Example #3:

Function call: `antique_purchase(['painting', 'sofa', 'lamp', 'vase', 'toy', 'statue'], [550, 900, 200, 75, 20, 150], 500)`

Return value: `['lamp', 'vase', 'toy', 'statue']`


<br>

Example #4:

Function call: `antique_purchase(['painting', 'sofa', 'lamp', 'vase', 'toy', 'statue'], [550, 900, 200, 75, 20, 150], 1500)`

Return value: `['painting', 'sofa', 'toy']`


<br>

Example #5:

Function call: `antique_purchase(['painting', 'sofa', 'lamp', 'vase', 'toy', 'statue'], [450, 900, 200, 75, 20, 150], 10)`

Return value: `[]`

"""

def antique_purchase(items, prices, budget):
    items_bought=[]
    for i in range(len(items)):
        if prices[i] < budget:
            items_bought.append(items[i])
            budget -= prices[i]
    return items_bought
# Test cases
print(antique_purchase(['chair', 'table', 'lamp', 'necklace', 'couch'], [50, 115, 250, 100, 1000], 300))
print(antique_purchase(['chair', 'table', 'lamp', 'necklace', 'couch', 'statue'], [50, 115, 250, 100, 800, 400], 1000))
print(antique_purchase(['painting', 'sofa', 'lamp', 'vase', 'toy', 'statue'], [550, 900, 200, 75, 20, 150], 500))
print(antique_purchase(['painting', 'sofa', 'lamp', 'vase', 'toy', 'statue'], [550, 900, 200, 75, 20, 150], 1500))
print(antique_purchase(['painting', 'sofa', 'lamp', 'vase', 'toy', 'statue'], [450, 900, 200, 75, 20, 150], 10))

"""### How to Submit Your Work

1. Go to the [course website](https://sites.google.com/stonybrook.edu/cse101sum/schedule-session-i).

1. Click the **Submit** link for this assignment.

1. Type your Net ID (Blackboard login) on the line provided.

1. Press the button marked **Add file**.

1. Click the **My Drive** tab.

1. Click on the file you wish to submit.

1. Hit **Select**.

1. Hit **Submit** to submit your file grading.
"""